#include "libImpossibleLevel.hpp"
#include <cmath>

extern Level levelDat("blank.lvl/level.dat");

void spike(int xpos, int ypos)
{
    float correctX = 0.75 * static_cast<float>(xpos);
    float correctY = 0.75 * static_cast<float>(ypos);
    BlockObj newSpike = {static_cast<int>(round(correctX)), static_cast<int>(round(correctY)), 01, 00};
    levelDat.addNewBlock(newSpike);
}

void block(int xpos, int ypos)
{
    float correctX = 0.75 * static_cast<float>(xpos);
    float correctY = 0.75 * static_cast<float>(ypos);
    BlockObj newBlock = {static_cast<int>(round(correctX)), static_cast<int>(round(correctY)), 00, 00};
    levelDat.addNewBlock(newBlock);
}

void pit(int startx, int endx)
{
    int correctStart = static_cast<int>(round(static_cast<float>(startx) * 0.75));
	int correctEnd = static_cast<int>(round(static_cast<float>(endx) * 0.75));

    BlockObj newPit = {correctStart, correctEnd, 02, 00};
    levelDat.addNewBlock(newPit);
}

void blockLine(int startx, int endx, int ypos)
{
    float distance = (static_cast<float>(endx) - static_cast<float>(startx)) * 0.75;
    int correctStart = static_cast<int>(round(static_cast<float>(startx) * 0.75));
    int numBlocks = static_cast<int>(round(distance/129 ));

    BlockObj newBlock = {0, 0, 0, 00};
    for(int i = 0; i < numBlocks; i++)
    {
        newBlock.xPos = (correctStart + (i * 129));
		newBlock.yPos = (ypos + (i * 30));
        levelDat.addNewBlock(newBlock);
    }
}

void fireAura()
{
	int dword_299578 = 0;
    spike(1400, 0);
    spike(2140, 0);
    spike(2180, 0);
    block(3000, 0);
    pit(3040, 3160);
    block(3180, 0);
    spike(3900, 0);
    spike(3940, 0);
    spike(4600, 0);
    spike(4950, 0);
    spike(4990, 0);
    spike(5200, 0);
    block(5500, 0);
    pit(5540, 6240);
    block(5662, 40);
    block(5824, 80);
    block(6029, 40);
    block(6236, 0);
    spike(6550, 0);
    spike(7200, 0);
    block(7800, 0);
    pit(7840, 8340);
    block(7962, 40);
    block(8052, 40);
    spike(8052, 80);
    block(8142, 40);
    block(8349, 0);
    spike(8560, 0);
    spike(9070, 0);
    spike(9500, 0);
    spike(9800, 0);
    spike(10150, 0);
	dword_299578 = -1170;
    block(10450, 0);
    pit(11660 + dword_299578, 20539 + dword_299578);
    block(11782 + dword_299578, 40);
    block(11944 + dword_299578, 80);
    block(12106 + dword_299578, 120);
    block(12268 + dword_299578, 160);
    block(12308 + dword_299578, 160);
    block(12348 + dword_299578, 160);
    block(12388 + dword_299578, 160);
    block(12428 + dword_299578, 160);
    block(12468 + dword_299578, 160);
    block(12508 + dword_299578, 160);
    block(12548 + dword_299578, 160);
    block(12588 + dword_299578, 160);
    block(12628 + dword_299578, 160);
    block(12668 + dword_299578, 160);
    block(12708 + dword_299578, 160);
    spike(12708 + dword_299578, 200);
    block(12830 + dword_299578, 200);
    block(12870 + dword_299578, 200);
    block(12910 + dword_299578, 200);
    block(12950 + dword_299578, 200);
    block(12990 + dword_299578, 200);
    spike(12990 + dword_299578, 240);
    block(13030 + dword_299578, 200);
    block(13070 + dword_299578, 200);
    block(13110 + dword_299578, 200);
    block(13150 + dword_299578, 200);
    block(13190 + dword_299578, 200);
    spike(13190 + dword_299578, 240);
    block(13230 + dword_299578, 200);
    block(13270 + dword_299578, 200);
    block(13310 + dword_299578, 200);
    block(13430 + dword_299578, 160);
    block(13500 + dword_299578, 240);
    spike(13500 + dword_299578, 280);
    block(13550 + dword_299578, 120);
    block(13670 + dword_299578, 80);
    block(13790 + dword_299578, 40);
    block(13910 + dword_299578, 0);
    block(14072 + dword_299578, 40);
    block(14234 + dword_299578, 80);
    block(14396 + dword_299578, 120);
    block(14558 + dword_299578, 160);
    block(14720 + dword_299578, 200);
    block(14882 + dword_299578, 240);
    block(15044 + dword_299578, 280);
    block(15206 + dword_299578, 320);
    block(15368 + dword_299578, 360);
    block(15530 + dword_299578, 400);
    block(15692 + dword_299578, 440);
    block(15854 + dword_299578, 480);
	dword_299578 = -3170;
    block(14804, 440);
    block(18136 + dword_299578, 480);
    block(18176 + dword_299578, 480);
    spike(18176 + dword_299578, 520);
	//dword is no longer needed
    block(18216 + dword_299578, 480);
    spike(18216 + dword_299578, 520);
    block(18256 + dword_299578, 480);
    spike(18256 + dword_299578, 520);
    block(18296 + dword_299578, 480);
    block(18503 + dword_299578, 440);
    block(18693 + dword_299578, 440);
    block(18733 + dword_299578, 440);
    block(18773 + dword_299578, 440);
    block(18935 + dword_299578, 480);
    block(19097 + dword_299578, 520);
    block(19259 + dword_299578, 560);
    block(19466 + dword_299578, 520);
    block(19582 + dword_299578, 480);
    block(19622 + dword_299578, 480);
    block(19662 + dword_299578, 480);
    spike(19662 + dword_299578, 520);
    block(19702 + dword_299578, 480);
    block(19742 + dword_299578, 480);
    block(19782 + dword_299578, 480);
    block(19822 + dword_299578, 480);
    block(19862 + dword_299578, 480);
    block(19902 + dword_299578, 440);
    spike(19902 + dword_299578, 480);
    block(19942 + dword_299578, 440);
    spike(19942 + dword_299578, 480);
    block(19982 + dword_299578, 440);
    spike(19982 + dword_299578, 480);
    block(20022 + dword_299578, 440);
    block(20062 + dword_299578, 440);
    block(20102 + dword_299578, 440);
    block(20142 + dword_299578, 440);
    block(20182 + dword_299578, 440);
    block(20222 + dword_299578, 440);
    block(20261 + dword_299578, 440);
    block(20469 + dword_299578, 400);
    block(20676 + dword_299578, 360);
    block(20883 + dword_299578, 320);
    block(21090 + dword_299578, 280);
    block(21297 + dword_299578, 240);
    block(21504 + dword_299578, 200);
    block(21711 + dword_299578, 160);
    block(21918 + dword_299578, 120);
    block(22125 + dword_299578, 80);
    block(22332 + dword_299578, 40);
    block(22539 + dword_299578, 0);
    spike(22750 + dword_299578, 0);
    spike(23000 + dword_299578, 0);
    spike(23040 + dword_299578, 0);
    spike(23350 + dword_299578, 0);
    spike(23390 + dword_299578, 0);
    spike(23430 + dword_299578, 0);
    block(23800 + dword_299578, 0);
    pit(23840 + dword_299578, 28760 + dword_299578);
    block(23962 + dword_299578, 40);
    block(24124 + dword_299578, 80);
    block(24286 + dword_299578, 120);
    block(24448 + dword_299578, 160);
    block(24568 + dword_299578, 120);
    block(24730 + dword_299578, 160);
    block(24920 + dword_299578, 160);
    block(25040 + dword_299578, 120);
    block(25202 + dword_299578, 160);
    block(25409 + dword_299578, 120);
    block(25571 + dword_299578, 160);
    block(25691 + dword_299578, 120);
    block(25853 + dword_299578, 160);
    block(26043 + dword_299578, 160);
    block(26233 + dword_299578, 160);
    block(26423 + dword_299578, 160);
    block(26630 + dword_299578, 120);
    block(26792 + dword_299578, 160);
    block(26912 + dword_299578, 120);
    block(27074 + dword_299578, 160);
    block(27236 + dword_299578, 200);
    block(27356 + dword_299578, 160);
    block(27426 + dword_299578, 240);
    spike(27426 + dword_299578, 280);
    block(27476 + dword_299578, 120);
    block(27596 + dword_299578, 80);
    block(27836 + dword_299578, 0);
    block(28026 + dword_299578, 0);
    block(28188 + dword_299578, 40);
    block(28350 + dword_299578, 80);
    block(28512 + dword_299578, 120);
    block(28593 + dword_299578, 120);
    spike(28593 + dword_299578, 160);
    block(28674 + dword_299578, 160);
    spike(28850 + dword_299578, 0);
    spike(29100 + dword_299578, 0);
    spike(29400 + dword_299578, 0);
    spike(29440 + dword_299578, 0);
    spike(29480 + dword_299578, 0);
    spike(29750 + dword_299578, 0);
    spike(29790 + dword_299578, 0);
    spike(30050 + dword_299578, 0);
    block(30300 + dword_299578, 0);
    pit(30340 + dword_299578, 34580 + dword_299578);
    block(30462 + dword_299578, 40);
    block(30624 + dword_299578, 80);
    block(30786 + dword_299578, 120);
    block(30948 + dword_299578, 160);
    block(31110 + dword_299578, 200);
    block(31272 + dword_299578, 240);
    block(31434 + dword_299578, 280);
    block(31596 + dword_299578, 320);
    block(31758 + dword_299578, 360);
    block(31920 + dword_299578, 400);
    block(32082 + dword_299578, 440);
    block(32244 + dword_299578, 480);
    block(32406 + dword_299578, 520);
    block(32568 + dword_299578, 560);
    block(32730 + dword_299578, 600);
    block(32892 + dword_299578, 640);
    block(33054 + dword_299578, 680);
    block(33216 + dword_299578, 720);
    block(33378 + dword_299578, 760);
    block(33540 + dword_299578, 800);
    block(33702 + dword_299578, 840);
    block(33864 + dword_299578, 880);
    block(34026 + dword_299578, 920);
    block(34188 + dword_299578, 960);
    spike(34188 + dword_299578, 1000);
    block(34390 + dword_299578, 200);
    block(34430 + dword_299578, 200);
    spike(34760 + dword_299578, 0);
    spike(34960 + dword_299578, 0);
    spike(35400 + dword_299578, 0);
    spike(35700 + dword_299578, 0);
    spike(35740 + dword_299578, 0);
    spike(35900 + dword_299578, 0);
    spike(35940 + dword_299578, 0);
    block(35980 + dword_299578, 0);
    spike(36020 + dword_299578, 0);
    spike(36060 + dword_299578, 0);
    block(36360 + dword_299578, 0);
    spike(36400 + dword_299578, 0);
    spike(36440 + dword_299578, 0);
    spike(36480 + dword_299578, 0);
    spike(36520 + dword_299578, 0);
    block(36900 + dword_299578, 0);
    pit(36940 + dword_299578, 37910 + dword_299578);
    block(37062 + dword_299578, 40);
    block(37224 + dword_299578, 80);
    block(37264 + dword_299578, 80);
    block(37304 + dword_299578, 80);
    block(37344 + dword_299578, 80);
    block(37384 + dword_299578, 80);
    spike(37384 + dword_299578, 120);
    block(37506 + dword_299578, 120);
    block(37626 + dword_299578, 80);
    block(37833 + dword_299578, 40);
    block(37953 + dword_299578, 0);
    spike(37993 + dword_299578, 0);
    spike(38033 + dword_299578, 0);
    spike(38073 + dword_299578, 0);
    spike(38113 + dword_299578, 0);
    spike(38400 + dword_299578, 0);
    spike(38800 + dword_299578, 0);
    spike(38840 + dword_299578, 0);
    spike(38880 + dword_299578, 0);
    spike(38990 + dword_299578, 0);
    spike(39030 + dword_299578, 0);
    spike(39070 + dword_299578, 0);
    block(39800 + dword_299578, 0);
    pit(39840 + dword_299578, 43000 + dword_299578);
    block(39962 + dword_299578, 40);
    block(40124 + dword_299578, 80);
    block(40286 + dword_299578, 120);
    block(40286 + dword_299578, 0);
    spike(40286 + dword_299578, 40);
    block(40448 + dword_299578, 160);
    block(40448 + dword_299578, 40);
    spike(40448 + dword_299578, 80);
    block(40610 + dword_299578, 200);
    block(40610 + dword_299578, 80);
    spike(40610 + dword_299578, 120);
    block(40772 + dword_299578, 240);
    block(40772 + dword_299578, 120);
    spike(40772 + dword_299578, 160);
    block(40934 + dword_299578, 280);
    block(40934 + dword_299578, 160);
    spike(40934 + dword_299578, 200);
    block(41096 + dword_299578, 320);
    block(41096 + dword_299578, 200);
    spike(41096 + dword_299578, 240);
    block(41216 + dword_299578, 280);
    block(41216 + dword_299578, 400);
    spike(41216 + dword_299578, 440);
    block(41336 + dword_299578, 240);
    block(41336 + dword_299578, 440);
    spike(41336 + dword_299578, 480);
    block(41543 + dword_299578, 200);
    block(41543 + dword_299578, 360);
    spike(41543 + dword_299578, 400);
    block(41750 + dword_299578, 160);
    block(41750 + dword_299578, 320);
    spike(41750 + dword_299578, 360);
    block(41940 + dword_299578, 160);
    block(41940 + dword_299578, 320);
    spike(41940 + dword_299578, 360);
    block(42102 + dword_299578, 200);
    block(42102 + dword_299578, 80);
    spike(42102 + dword_299578, 120);
    block(42264 + dword_299578, 240);
    block(42264 + dword_299578, 120);
    spike(42264 + dword_299578, 160);
    block(42426 + dword_299578, 280);
    block(42426 + dword_299578, 160);
    spike(42426 + dword_299578, 200);
    block(42578 + dword_299578, 320);
    block(42578 + dword_299578, 200);
    spike(42578 + dword_299578, 240);
    block(42745 + dword_299578, 360);
    block(42745 + dword_299578, 240);
    spike(42745 + dword_299578, 280);
    block(42785 + dword_299578, 360);
    spike(42785 + dword_299578, 400);
    block(42855 + dword_299578, 320);
    spike(42855 + dword_299578, 360);
    block(42895 + dword_299578, 280);
    spike(42895 + dword_299578, 320);
    block(42935 + dword_299578, 200);
    spike(42935 + dword_299578, 240);
    block(42975 + dword_299578, 120);
    spike(42975 + dword_299578, 160);
    block(43005 + dword_299578, 0);
    spike(43005 + dword_299578, 40);
    spike(43360 + dword_299578, 0);
    spike(43660 + dword_299578, 0);
    spike(43700 + dword_299578, 0);
    spike(44000 + dword_299578, 0);
    spike(44040 + dword_299578, 0);
    spike(44080 + dword_299578, 0);
    spike(44380 + dword_299578, 0);
    spike(44420 + dword_299578, 0);
    spike(44760 + dword_299578, 0);
    blockLine(45490 + dword_299578, 50000 + dword_299578, 0);
    pit(45530 + dword_299578, 50000 + dword_299578);
    levelDat.setEndPos((45490 + dword_299578) * 0.75);
}

int main()
{
    fireAura();
    levelDat.writeDataToFile("output/fireaura.lvl/level.dat");
    return 0;
}